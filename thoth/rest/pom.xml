<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.evil</groupId>
		<artifactId>thoth</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>
	<artifactId>thoth-rest</artifactId>
	<packaging>war</packaging>

	<properties>
		<!-- Explicitly declaring the source encoding eliminates the following message: -->
		<!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent! -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- maven-compiler-plugin -->
		<maven.compiler.source>1.7</maven.compiler.source>
		<maven.compiler.target>1.7</maven.compiler.target>

		<!-- Options to override the compiler arguments directly on the compiler argument line to separate between what the IDE understands as the source level 
			and what the Maven compiler actually use. -->
		<maven.compiler.argument.source>${maven.compiler.source}</maven.compiler.argument.source>
		<maven.compiler.argument.target>${maven.compiler.target}</maven.compiler.argument.target>

		<!-- JBoss dependency versions -->
		<version.jboss.maven.plugin>7.4.Final</version.jboss.maven.plugin>
		<version.jboss.spec.javaee.6.0>3.0.2.Final-redhat-4</version.jboss.spec.javaee.6.0>

		<!-- other plugin versions -->
		<version.war.plugin>2.1.1</version.war.plugin>
		<version.apiviz>1.3.2.GA</version.apiviz>
		<version.clean.plugin>2.4.1</version.clean.plugin>
		<version.compiler.plugin>3.0</version.compiler.plugin>
		<version.jersey>1.17.1</version.jersey>

		<!-- javadoc plugins -->
		<version.javadoc.encoding>${project.build.sourceEncoding}</version.javadoc.encoding>
		<version.javadoc.plugin>2.9.1</version.javadoc.plugin>
	</properties>

	<dependencyManagement>
		<dependencies>
			<!-- Define the version of JBoss' Java EE 6 APIs we want to import. Any dependencies from org.jboss.spec will have their version defined by this BOM -->
			<!-- JBoss distributes a complete set of Java EE 6 APIs including a Bill of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection) 
				of artifacts. We use this here so that we always get the correct versions of artifacts. Here we use the jboss-javaee-6.0 stack (you can read this as the 
				JBoss stack of the Java EE 6 APIs). You can actually use this stack with any version of JBoss AS that implements Java EE 6, not just JBoss AS 7! -->
			<dependency>
				<groupId>org.jboss.spec</groupId>
				<artifactId>jboss-javaee-6.0</artifactId>
				<version>${version.jboss.spec.javaee.6.0}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>

		<!-- Import the CDI API, we use provided scope as the API is included in JBoss AS 7 -->
		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the Common Annotations API (JSR-250), we use provided scope as the API is included in JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.annotation</groupId>
			<artifactId>jboss-annotations-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JAX-RS API, we use provided scope as the API is included in JBoss AS 7 -->
		<dependency>
			<groupId>org.jboss.spec.javax.ws.rs</groupId>
			<artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import Swagger dependencies <dependency> <groupId>com.wordnik</groupId> <artifactId>swagger-jaxrs_2.10</artifactId> <version>1.3.0</version> </dependency> -->

		<!-- JBoss RESTEasy
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jaxrs</artifactId>
			<version>3.0.4.Final</version>
		</dependency>
		 -->
		<!-- swagger  
		<dependency>
			<groupId>com.wordnik</groupId>
			<artifactId>swagger-jersey-jaxrs_2.9.1</artifactId>
			<version>1.3.0</version>
		</dependency>
		<dependency>
			<groupId>com.wordnik</groupId>
			<artifactId>swagger-annotations_2.9.1</artifactId>
			<version>1.3.0</version>
		</dependency>
		<dependency>
			<groupId>com.wordnik</groupId>
			<artifactId>swagger-core_2.9.1</artifactId>
			<version>1.3.0</version>
		</dependency>
		-->
		<!-- Jersey
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-server</artifactId>
			<version>${version.jersey}</version>
		</dependency>
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-core</artifactId>
			<version>${version.jersey}</version>
		</dependency>
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-client</artifactId>
			<version>${version.jersey}</version>
		</dependency>
		<dependency>
			<groupId>com.sun.jersey</groupId>
			<artifactId>jersey-servlet</artifactId>
			<version>${version.jersey}</version>
			<scope>compile</scope>
		</dependency>
		 -->
		<!-- 
		<dependency>
			<groupId>javax.persistence</groupId>
			<artifactId>persistence-api</artifactId>
			<version>1.0.2</version>
			<scope>compile</scope>
		</dependency>
		-->
	</dependencies>
 		

	<build>
		<!-- Set the name of the war, used as the context root when the app is deployed -->
		<finalName>thoth-rest</finalName>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-clean-plugin</artifactId>
					<version>${version.clean.plugin}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${version.compiler.plugin}</version>
					<configuration>
						<showDeprecation>true</showDeprecation>
						<showWarnings>true</showWarnings>
						<compilerArguments>
							<source>${maven.compiler.argument.source}</source>
							<target>${maven.compiler.argument.target}</target>
						</compilerArguments>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>${version.war.plugin}</version>
				<configuration>
					<!-- Java EE 6 doesn't require web.xml, Maven needs to catch up! -->
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
			<!-- JBoss AS plugin to deploy war -->
			<plugin>
				<groupId>org.jboss.as.plugins</groupId>
				<artifactId>jboss-as-maven-plugin</artifactId>
				<version>${version.jboss.maven.plugin}</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>${version.javadoc.plugin}</version>
				<executions>
					<execution>
						<id>generate-api-docs</id>
						<phase>generate-resources</phase>
						<configuration>
							<doclet>org.jboss.apiviz.APIviz</doclet>
							<docletArtifact>
								<groupId>org.jboss.apiviz</groupId>
								<artifactId>apiviz</artifactId>
								<version>${version.apiviz}</version>
							</docletArtifact>
							<useStandardDocletOptions>true</useStandardDocletOptions>
							<charset>${version.javadoc.encoding}</charset>
							<encoding>${version.javadoc.encoding}</encoding>
							<docencoding>${version.javadoc.encoding}</docencoding>
							<breakiterator>true</breakiterator>
							<version>true</version>
							<author>true</author>
							<keywords>true</keywords>
							<additionalparam>
								-sourceclasspath ${project.build.outputDirectory}
								-docletpath
								/opt/apiviz/apiviz-${version.apiviz}/apiviz-${version.apiviz}.jar
							</additionalparam>
						</configuration>
						<goals>
							<!-- <goal>javadoc</goal> -->
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<!-- When built in OpenShift the 'openshift' profile will be used when invoking mvn. -->
			<!-- Use this profile for any OpenShift specific customization your app will need. -->
			<!-- By default that is to put the resulting archive into the 'deployments' folder. -->
			<!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
			<id>openshift</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-war-plugin</artifactId>
						<version>${version.war.plugin}</version>
						<configuration>
							<outputDirectory>deployments</outputDirectory>
							<warName>ROOT</warName>
							<!-- Java EE 6 doesn't require web.xml, Maven needs to catch up! -->
							<failOnMissingWebXml>false</failOnMissingWebXml>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	<!-- <reporting> <plugins> </plugins> </reporting> -->
</project>